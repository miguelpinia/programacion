#+title: Práctica 3
#+author: Miguel Piña

* Balance perfecto para un árbol binario

** Busqueda binaria

Antes de plantear el problema, vamos a explicar que es la búsqueda binaria. La
búsqueda binaria es un algoritmo de búsqueda que se encarga de buscar un valor
dado en un arreglo ordenado.

Compara el valor con el elemento en el medio del arreglo, si no son iguales, la
mitad del arreglo en la que no puede estar el valor es "eliminada" y la búsqueda
es realizada en la mitad restante, repitiendo estos pasos hasta que sólo quede
un elemento que coincida con el valor buscado o ya no haya elementos sobre los
cuales realizar la búsqueda.

La búsqueda binaria es ejecutada en el peor de los casos en O(log n)
comparaciones, donde n es el número de elementos en el arreglo y log es el
logaritmo.

El algoritmo de la búsqueda implementado en python es el siguiente:

#+begin_src python
  def busqueda_binaria(val, lista, low = 0, high = None):
      high = len(lista) if high is None else high
      pos = low + (high - low) / len(lista)

      if pos == len(lista):
          return False
      elif lista[pos] == val:
          return pos
      elif high == low:
          return False
      elif lista[pos] < val:
          return busqueda_binaria(val, lista, pos + 1, high)
      else:
          assert lista[pos] > val
          return busqueda_binaria(val, lista, low, pos)
#+end_src

** Problema del balanceo perfecto

Escribe un programa que inserte una serie de elementos en un árbol binario de
búsqueda, tal que el árbol producido sea equivalente a la búsqueda binaria, en
el sentido de que la secuencia de comparaciones hechas en la búsqueda de
cualquier valor en el árbol binario de búsqueda, sea igual a la secuencia de
comparaciones usadas por la búsqueda binaria para buscar ese mismo elemento.

Este problema es básicamente modificar el árbol de búsqueda visto en clase para
que cada vez que se realice una inserción, el árbol balancee sus nodos para que
las hojas siempre tenga la misma profundidad o la distancia entre dos hojas
cualesquiera siempre sea a lo más uno.

* Entregables

En un archivo tar.gz o zip nombrado como (primer-apellido)-(nombre).{tar.gz,
zip} entregar los siguientes archivos:

- Un archivo README.txt con sus nombre, número de cuenta y un texto donde se
  explique como usar su programa. También dentro del README deben de explicar
  detalladamente el porqué diseñaron su programa del modo en el que lo están
  entregando, es decir, el porqué de cada clase que implementen.
- Un archivo(s) en python que contenga el código de su programa. Este archivo
  (o archivos) debe de estar dentro de una carpeta src.

Se debe enviar el archivo comprimido al correo miguel_pinia@ciencias.unam.mx,
con el subject: *Programación 2017-2: Práctica 3*

La fecha de entrega es el día *25 de mayo del 2017* /antes de las 23:59/. Después
de esa hora ya no se reciben trabajos.
