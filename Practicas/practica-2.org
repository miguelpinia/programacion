#+title: Práctica 2
#+author: Fernanda Sanchez, Miguel Piña

* Validando cadenas de paréntesis

En los lenguajes de programación estilo Lisp (Lisp, Clojure, Scheme, etc.), es
necesario escribir los programas en forma de [[https://es.wikipedia.org/wiki/Expresi%25C3%25B3n_S][s-expressions]], donde es posible
representar expresiones del lenguaje en forma de estructuras de datos de tipo
[[https://es.wikipedia.org/wiki/%25C3%2581rbol_(teor%25C3%25ADa_de_grafos)][árbol]], todo esto basado en listas anidadas (paréntesis que abren y cierran),
donde cada sublista también es un árbol.

La meta de esta práctica es implementar un validador de cadenas que permita
identificar cuando existan pares de paréntesis bien formados, es decir, siempre
que haya un paréntesis que abra, tiene que existir un paréntesis que cierre.

Son ejemplos de cadenas de paréntesis bien formadas las siguientes:

- (())
- (()())
- (((((()))((())))()))
- (((())) ((((())) ((())) (()))) (((()))))

Son ejemplos de cadenas de paréntesis mal formadas las siguientes:

- ((()((())()
- ())
- (((()
- (((()))))()))()))

Para resolver este problema es necesario implementar un programa que se encargue
de validar dichas cadenas, imprimiendo en pantalla si es una cadena bien formada
o no lo es.

Este programa debe estar implementado siguiendo el paradigma de programación
orientado a objetos. Esto quiere decir que deben de tener una clase que
represente una estructura de datos que les ayude a manipular las cadenas, otra
clase que sea la encargada de establecer la interfaz de usuario a través de la
consola y tal vez otra que provee herramientas que consideren necesaria para
realizar la tarea solicitada.

* Entregables

En un archivo tar.gz o zip nombrado como (primer-apellido)-(nombre).{tar.gz,
zip} entregar los siguientes archivos:

- Un archivo README.txt con sus nombre, número de cuenta y un texto donde se
  explique como usar su programa. También dentro del README deben de explicar
  detalladamente el porqué diseñaron su programa del modo en el que lo están
  entregando, es decir, el porqué de cada clase que implementen.
- Un archivo(s) en python que contenga el código de su programa. Este archivo
  (o archivos) debe de estar dentro de una carpeta src.

Se debe enviar el archivo comprimido al correo miguel_pinia@ciencias.unam.mx,
con el subject: *Programación 2018-2: Práctica 2*

La fecha de entrega es el día *14 de abril del 2017* antes de las *23:59*. Después
de esa hora ya no se reciben trabajos.
