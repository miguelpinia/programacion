#+title: Clase 5: Pilas y Colas
#+author: Miguel Piña
#+date: [2017-03-12 dom 21:12]

* ¿Qué es una pila?

Una pila es una colección ordenada de elementos, donde la adición de nuevos
elementos y la eliminación de los mismos se realiza en el mismo
lugar. Comúnmente nos vamos a referir a esa sección como *tope* de la pila. El
lado opuesto lo vamos a conocer como *base*.

El modo de acceso a sus elementos es de tipo LIFO (del inglés *Last In First Out*,
«último en entrar, primero en salir»).

Podemos tener como ejemplo, una pila de libros:

[[file:bookstack2.png]]



* ¿Qué es un ADT?

Un ADT (Abstract Data Type) se refiere a un modelo matemático para tipos de
datos, donde un tipo de dato está definido por su comportamiento desde el punto
de vista del usuario de los datos, específicamente en términos de posibles
valores ó posibles operaciones sobre los datos de este tipo, así como el
comportamiento de esas operaciones.

Formalmente un ADT podría definirse como «una clase de objetos cuyo
comportamiento lógico es definido por un conjunto de valores y un conjunto de
operaciones», siendo análogo al concepto de estructura algebraica en
matemáticas.

Lo que se entiende por "comportamiento" varía según el autor, y los dos tipos
principales de especificaciones formales para el comportamiento son
especificaciones axiomáticas (algebraicas) y un modelo abstracto, que
corresponden a la semántica axiomática y a la semántica operativa de una máquina
abstracta, respectivamente. Algunos autores también incluyen la complejidad
computacional ("costo"), tanto en términos de tiempo (para operaciones de
cálculo) como de espacio (de representación de valores).

* ADT de una pila

El ADT de una pila está definida por las siguientes estructura y
operaciones. Una pila está estructurada como una colección ordenada de
elementos, donde los elementos son añadidos o eliminados desde el «tope» de la
pila. Las pilas son LIFO. Una pila va a tener las siguientes operaciones:


- Stack() :: Construye una nueva pila vacía. No necesita parámetros y regresa
     una pila vacía.
- push(x) :: Agrega un nuevo elemento en el tope de la pila. Necesita el
     elemento y no regresa nada.
- pop() :: Elimina el elemento que esta en el tope de la pila. No necesita
     parámetros y devuelve el elemento que se eliminó.
- peek () :: Regresa el elemento que se encuentra en la parte superior de la
     pila pero no lo elimina. No necesita parámetros, no modifica la pila.
- isEmpty() :: Verifica si la pila está vacía. No necesita parámetros y regresa
     un valor booleano.
- size() :: Regresa el número de elementos en la pila. No necesita parámetros y
     regresa un entero.


| Stack Operation | 	Stack Contents | Return Value |
|-----------------+--------------------+--------------|
| s.isEmpty()     | 	[]             | True         |
| s.push(4)       | [4]                |              |
| s.push('dog')   | 	[4,'dog']	   |              |
| s.peek()        | [4,'dog']	       | 'dog'        |
| s.push(True)    | [4,'dog',True]     |              |
| s.size()        | [4,'dog',True]	   | 3            |
| s.isEmpty()     | [4,'dog',True]     | 	False     |
| s.push(8.4)     | [4,'dog',True,8.4] |              |
| s.pop()	      | [4,'dog',True]	   | 8.4          |
| s.pop()	      | [4,'dog']          | 	True      |
| s.size()        | [4,'dog']          | 	2         |

* Implementando una pila en python

[[https://docs.python.org/3.5/reference/datamodel.html#object.__new__][Revisar.]]
