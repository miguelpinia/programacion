#-*- mode: org -*-

* Mas herencia
La herencia permite organizar clases relacionadas entre sí dentro de familias.
Esta idea permite esconder detalles de la programación y extender o modificar un programa.

Una familia de clases se conoce como *Jerarquia de Clases*. Las clases hijos pueden heredar atributos y metodos de las clases padres,
pueden modificarlos y agregar sus propios metodos y atributos.

Con la ventaja de que las otras partes del codigo no necesitan distinguir si un objeto es el padre o el hijo, las clases siguen funcionando de manera individual.
La invencion del concepto de orientacion a objetos es un gran logro y sus inventores Dahl y Nygaard recibieron el premio Turing y la medalla Von Neumann por eso.

** Ejemplo
Describir una linea recta y = c0 + c1x

#+BEGIN_SRC python
import numpy as np

class Line:
     def __init__(self, c0, c1):
         self.c0 = c0
         self.c1 = c1
     
     def __call__(self, x):
'Evalua la funcion'
         return self.c0 + self.c1*x
     
     def table(self, L, R, n):
"""Return a table with n points for L <= x <= R.""" s = ’’
        for x in np.linspace(L, R, n):
           y = self(x)
           s += str(x) + " " +  str(y) + "\n"
        return s
l = Line(3,4)
print(l(2))
# 11
#+END_SRC python

#+BEGIN_SRC python
import numpy as np
class Parabola:
     def __init__(self, c0, c1, c2):
         self.c0 = c0
         self.c1 = c1
         self.c2 = c2

     def __call__(self, x):
         return self.c2*x**2 + self.c1*x + self.c0

     def table(self, L, R, n):
"""Return a table with n points for L <= x <= R.""" s = ’’
         for x in np.linspace(L, R, n):
         y = self(x)
         s += ’%12g %12g\n’ % (x, y)
         return s
#+END_SRC python

El metodo table es el mismo que en la clase linea.
Una parabola y = c0 + c1X + c2X^2 contiene una linea recta como un caso especial de c2=0.
Entonces la clase parabola es una linea rectay debemos agregar el termino c2X^2.

Usando herencia, la clase parabola hereda completamente el metodo table y solo debemos sobreescribir el constructor y el metodo call que se heredan.

Cualquier metodo en la super clase puede ser llamado usando la sintaxis:
#+BEGIN_SRC python
Line.methodname(self, arg1, arg2, ...)

super(Line, self).methodname(arg1, arg2, ...)
#+END_SRC python

#+BEGIN_SRC python
class Parabola(Line):
     def __init__(self, c0, c1, c2):
        super().__init__(c0, c1) 
        self.c2 = c2

     def __call__(self, x):
         return Line.__call__(self, x) + self.c2*x**2

p = Parabola(1, -2, 2)
p1 = p(x=2.5)
print(p1)
print(p.table(0, 1, 3))
#+END_SRC python

Podemos checar si una instancia i es de un tipo t o si es una subclase:

#+BEGIN_SRC python
l = Line(-1, 1)
print(isinstance(l, Line))
print(isinstance(l, Parabola))

p = Parabola(-1, 0, 10)
print(isinstance(p, Parabola))
print(isinstance(p, Line))

print(issubclass(Parabola, Line))
print(issubclass(Line, Parabola))
#+END_SRC python

* Otra perspectiva
En lugar de hacer que una parabola sea una extension de una linea y herede de ella,
podemos ver a una linea como un atributo de una parabola.

Depende del problema, podemos decir que una parabola *es* una linea y que *esta en relacion* con una linea o
podemos decir que una parabola *tiene* una linea y que *tiene una relacion* con una linea.

Los matematicas diran que una parabola no es una linea, sino que una linea es un caso especial de la parabola.
#+BEGIN_SRC python
class Parabola:
     def __init__(self, c0, c1, c2):
        self.c0, self.c1, self.c2 = c0, c2, c2

     def __call__(self, x):
         return self.c0 + self.c1*x + self.c2*x**2


class Line(Parabola):
     def __init__(self, c0, c1):
         super().__init__(c0, c1, 0)
#+END_SRC python

La dependencia de las clases esta influenciado por tres factores:
1. Compartir el codigo. 
La clase parabola es una subclase de la clase de linea.
2. Relaciones logicas.
Linea es una subclase de parabola.
3. Eficiencia computacional. 
Cuando parabola es una subclase de linea siempre se evalua el polinomio de segundo grado aunque sea 0 y esto es costo.



