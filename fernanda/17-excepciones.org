#-*- mode: org -*-

* Excepciones
Un programa debe ser capaz de morir dignamente indicando el error que lo hizo morir o sorteando las dificultades.
Las excepciones son errores especiales que necesitan ser manejadas.

Una excepcion es un objeto, hay muchas definidas por Python o podemos crear las propias.
Todas heredan de la clase BaseException.

Hay 3 tipos de errores:
- Sintacticos: estructura del programa y reglas de escritura.
- Sematicos: el programa se ejecuta pero no hace lo que se desea.
- Tiempo de Ejecucion: Llamadas excepciones.

Diferentes tipos de errores manejador por el sistema:

#+BEGIN_SRC python
print "hello world"
#  File "<stdin>", line 1
#    print "hello world"                     ^
# SyntaxError: invalid syntax

x = 5 / 0
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# ZeroDivisionError: int division or modulo by zero

lst = [1,2,3]
print(lst[3])
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# IndexError: list index out of range

lst + 2
# Traceback (most recent call last):
# File "<stdin>", line 1, in <module>
# TypeError: can only concatenate list (not "int") to list

lst.add
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
# AttributeError: 'list' object has no attribute 'add'

d = {'a': 'hello'}
d['b']
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
# KeyError: 'b'

print(this_is_not_a_var)
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
# NameError: name 'this_is_not_a_var' is not defined
#+END_SRC python

Una excepcion indica que algo mal ocurrio en el programa aun cuando haya sido en una situacion legitima.
Como una division entre 0 o la edad de una persona.

* Levantando una excepcion
Vamos a escribir un programa que informe al usuario cuando los valores de entrada que recibe son invalidos.
Una clase que guarde elementos en una lista solo si son numeros pares.

#+BEGIN_SRC python
class EvenOnly(list):
       def append(self, integer):
           if not isinstance(integer, int):
               raise TypeError("Solo numeros enteros")
           if integer % 2:
               raise ValueError("Solo numeros pares")
           super().append(integer)

e = EvenOnly()
e.append("una cadena")
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
#  File "even_integers.py", line 7, in add
#    raise TypeError("Only integers can be added")
# TypeError: Only integers can be added

e.append(3)
# Traceback (most recent call last):
#  File "<stdin>", line 1, in <module>
#  File "even_integers.py", line 9, in add
#    raise ValueError("Only even numbers can be added")
# ValueError: Only even numbers can be added

e.append(2)
#+END_SRC python

La clase extiende la clase list y sobreescribe el metodo append para guardar solo numeros pares.
Si no es un entero o un numero par levanta una excepcion con la palabra *raise* y el tipo de excepcion.

** Efectos de una excepcion
Cuando se levanta una excepcion, se detiene la ejecucion del programa sin ejecutar las lineas de ejecucion posteriores.

#+BEGIN_SRC python
def no_return():
   print("A punto de levantar una excepcion") 
   raise Exception("Esto siempre se ejecuta") 
   print("Esta linea nunca se jecuta") 
   return "No regresare"

no_return()
#+END_SRC python

Lo mismo ocurre si una funcion llama a otra funcion que levanta una excepcion:

#+BEGIN_SRC python
def call_exceptor():
   print("Empieza la funcion...") 
   no_return()
   print("surgio un error...") 
   print("...esto no se ejecuta")

call_exceptor()
#+END_SRC python
