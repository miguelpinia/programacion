#-*- mode: org -*-

* Clases Abstractas ABCs
Las clases abstractas definen un conjunto de metodos y propiedades que una
clase debe implementar para ser considerada una instancia de ese tipo de clase.

La mayoria de las clases abstractas de Python estan en la biblioteca collection.
Una de las mas simples es la clase container.

#+BEGIN_SRC python
from collections import Container
help(Container.__contains__)
#+END_SRC python

La clase Container tiene el metodo abstracto __contains__ que se debe implementar.
__contains__ toma un solo argumento que evalua si se encuentra o no dentro del contenedor.
Este metodo esta implementado en las clases list, str, dict.

Podemos hacer nuestro contenedor que indique si un valor esta en el conjunto de enteros impares:

#+BEGIN_SRC python
class OddContainer:
       def __contains__(self, x):
           if not isinstance(x, int) or not x % 2:
               return False
           return True

from collections import Container
odd_container = OddContainer()
isinstance(odd_container, Container)
#   True
issubclass(OddContainer, Container)
#   True

1 in odd_container
#   True
2 in odd_container
#   False
3 in odd_container
#   True
"a string" in odd_container
#   False

#+END_SRC python

Cualquier clase que tenga el metodo __contains__ es de tipo Container.

* Creando clases abstractas
Vamos a crearuna clase abstracta para nuestro reproductor de audio.

#+BEGIN_SRC python
import abc
   class MediaLoader(metaclass=abc.ABCMeta):
       @abc.abstractmethod
       def play(self):
          pass

       @abc.abstractproperty
       def ext(self):
          pass

       @classmethod
       def __subclasshook__(cls, C):
           if cls is MediaLoader:
               attrs = set(dir(C))
               if set(cls.__abstractmethods__) <= attrs:
                   return True
           return False
#+END_SRC python

*metaclass* da habilidades de superclase.
*@abc.abstractmethod y @abc.abstractproperty* marcan el metodo y las propiedad como abstractos, 
cualquier subclase debe implementar ese metodo y tener esa propiedad para ser miembro de esa clase.
*__subclasshook* dice que cualquier clase que implemente los atributos abstractos es digna de considerarse 
miembro de ese tipo.

Lo que pasa si se intenta implementar la clase sin esos metodos:

#+BEGIN_SRC python
class Wav(MediaLoader):
     pass
x = Wav()
#   Traceback (most recent call last):
#     File "<stdin>", line 1, in <module>
#   TypeError: Can't instantiate abstract class Wav with abstract methods
#   ext, play

class Ogg(MediaLoader):
    ext = '.ogg'
    def play(self):
       pass
o = Ogg()

print(issubclass(Ogg, MediaLoader))
#   True
print(isinstance(Ogg(), MediaLoader))
#   True
#+END_SRC python
