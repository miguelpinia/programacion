#+title: Arboles
#+author: Miguel Piña
#+date: [2017-04-23 dom 19:50]

* ¿Qué son los árboles?

En ciencias de la computación y en informática, un árbol es un tipo abstracto de
datos (TAD) ampliamente usado que imita la estructura jerárquica de un árbol,
con un valor en la raíz y subárboles con un nodo padre, representado como un
conjunto de nodos enlazados.

Una estructura de datos de árbol se puede definir de forma recursiva
(localmente) como una colección de nodos (a partir de un nodo raíz), donde cada
nodo es una estructura de datos con un valor, junto con una lista de referencias
a los nodos (los hijos) , con la condición de que ninguna referencia esté
duplicada ni que ningún nodo apunte a la raíz.

[[file:arbol.png]]

Aunque antes de hablar de árboles y su uso, vamos a dar una revisión superficial
sobre el análisis de algoritmos, ya que esto nos servirá para entender conceptos
más adelante y poder entender la diferencia entre las distintas estructuras de
datos que veremos en lo que resta del curso.

* Introducción al análisis de algoritmos

- Un algoritmo es claramente un conjunto de instrucciones simples que deben ser
  seguidas para resolver un problema.
- Dado un algoritmo, es importante saber cual es el costo de este, es decir,
  cuanto espacio o tiempo va a requerir para resolver el problema.
- Para determinar lo anterior, es necesario tener un marco de trabajo formal
  donde podamos determinar el costo de esto.

** Ejemplos

- 7n - 3 es O(n)
- $8n^{2}log n + 5n^{2} + n$ es $O(n^{2}log n)$

Para darnos una idea sencilla de cómo aplican estos conceptos en nuestro código,
podemos observar la siguiente tabla:

[[file:order-of-growth.png]]

* Qué diferencia existe entre un árbol y las estructuras secuenciales

En las estructuras lineales, la búsqueda de un elemento particular puede tomar
tiempo lineal, es decir, realizará tantas operaciones como elementos tenga la
estructura, el tiempo de ejecución será de O(n) /(Linear)/.

En los árboles, el tiempo de búsqueda es $log_{b}(N)$, donde b, es el número
máximo de hijos que puede tener cada rama. Para nosotros, nos basta con usar
árboles binarios, de los cuáles veremos árboles binarios (de búsqueda) y árboles
AVL.

* Implementando árboles en python

Para implementar el ADT de un árbol binario, debemos considerar las siguientes
operaciones:

- Contains(x)
- isEmpty()
- findMin()
- findMax()
- insert(x)
- remove(x)

¿Cómo lo implementamos?
