#+title: Clase 5
#+author: Miguel Piña
#+date: [2017-02-19 dom 17:05]
#+setupfile: ~/proyectos/org-html-themes/setup/theme-bigblow.setup

* Un poco de reflexión (Programas y programación)

- Un /programa/ es un conjunto de instrucciones.
- Todo programa está escrito en términos de unas pocas operaciones, de modo que
  puedan ser seguidas, es decir, que puedan entenderlas.
- Las computadoras pueden seguir un conjunto de operaciones.
- A las computadoras les podemos enseñar /"nuevos trucos"/.
- Definir nuevas operaciones y combinarlas para hacer cosas útiles, es el
  corazón y el alma de programar.

* ¿Qué es un bug?

- Es un error de codificación que llevas a estados de ejecución innesperados.
- No necesariamente es un error de ejecución.
- Puede ser errores al calcular una suma o recorrer una lista de elementos, sin
  que estos causen que falle el sistema.
- Es misión del programador minimizar el número de bugs que puede tener un
  programar y reducir su severidad.
- Una vez encontrado un bug, hay que corregir la sección de código del programa
  que causa este desperfecto y llevarlo a un estado que haga lo que se supone
  estaba diseñado originalmente.
- Lo anterior es una de las principales causas de que un programa se tenga que
  estar actualizando constantemente. La otra es cuando se agregan nuevas
  características al programa.


* ¿Qué es un tipo?

Un tipo (en computación) se va a referir a un elemento que consiste de dos
cosas:

- Un conjunto de valores
- Un conjunto de operaciones en los que se pueden aplicar esos valores.

Por ejemplo, en el tipo /int/, los valores son ..., -3, -2, -1, 0, 1, 2, 3, ... y
tenemos el conjunto de operaciones: +, -, *, /, %, entre otros.

De igual forma funciona para las tipos flotantes, complejos e inclusos con tipos
definidos por el usuario, como las personas, donde un valor es una instancia
particular de esa clase y sus operaciones son los métodos definidos dentro de la
misma.


* Repaso de los tipos "primitivos" de datos en Python

En python 3, se redujeron los tipos a los siguientes:

- Booleans
- Integers
- Floats
- Complex

Los primeros (/Booleans/) se evaluan a valores que representan *verdadero* o *falso*,
mientras que los otros tres (/Integers/, /Floats/, /Complex/), son tipos numéricos.

De los tipos anteriores podemos notar lo siguiente:

- Los Booleans son un subtipo de los números enteros (/integers/).
- Los enteros tienen precisión arbitraria.
- Los números flotantes (/floats/) son implementados usando /doubles/ de C. Estos
  últimos son modelados a través de 8 bytes por número y operan en el rango de -
  1.79*10^308 a 1.79*10^308, recibiendo hasta 14 numéros decimales después del
  punto. Dependiendo de la máquina, lo anterior puede ser consultado con la
  instrucción:


#+begin_src python
  import sys
  sys.float_info
#+end_src

- Los números complejos tienem una parte real y una parte imaginaria, donde cada
  una de ellas es un número flotante. Para acceder a estos valores hay que
  invocarlas de la siguiente forma:

#+begin_src python
  z.real # La parte real
  z.imag # La parte imaginaria
#+end_src
